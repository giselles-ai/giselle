name: Issue Association Check

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]

jobs:
  check-issue-association:
    runs-on: ubuntu-latest
    permissions:
      issues: read
      pull-requests: write
    steps:
      - name: Check issue association and assignee
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pr = context.payload.pull_request;
            const prNumber = pr.number;
            const prCreator = pr.user.login;
            const commentMarker = "<!-- issue-association-check -->";

            // Find linked issues using multiple methods
            const linkedIssues = [];

            // Method 1: Use GraphQL to get closing issues references
            try {
              // GraphQL query to get issues that would be closed when the PR is merged
              const graphqlQuery = `
                query($owner: String!, $repo: String!, $prNumber: Int!) {
                  repository(owner: $owner, name: $repo) {
                    pullRequest(number: $prNumber) {
                      closingIssuesReferences(first: 10) {
                        nodes {
                          number
                          repository {
                            owner {
                              login
                            }
                            name
                          }
                        }
                      }
                      comments(last: 100) {
                        nodes {
                          id
                          body
                        }
                      }
                    }
                  }
                }
              `;

              const graphqlResponse = await github.graphql(graphqlQuery, {
                owner,
                repo,
                prNumber
              });

              const closingIssues = graphqlResponse.repository?.pullRequest?.closingIssuesReferences?.nodes || [];
              const comments = graphqlResponse.repository?.pullRequest?.comments?.nodes || [];
              
              // Find our marker comment if it exists
              const existingComment = comments.find(comment => comment.body.includes(commentMarker));

              for (const issue of closingIssues) {
                const issueOwner = issue.repository?.owner?.login || owner;
                const issueRepo = issue.repository?.name || repo;
                const issueNumber = issue.number;

                // Check if this issue is already in our list
                const isDuplicate = linkedIssues.some(
                  existingIssue => existingIssue.owner === issueOwner &&
                                   existingIssue.repo === issueRepo &&
                                   existingIssue.number === issueNumber
                );

                if (!isDuplicate) {
                  linkedIssues.push({ owner: issueOwner, repo: issueRepo, number: issueNumber });
                  console.log(`Added issue ${issueOwner}/${issueRepo}#${issueNumber} from GraphQL closing issues`);
                }
              }
            } catch (error) {
              console.log(`Error using GraphQL API: ${error.message}`);
            }

            // Function to post comment - either create new or update existing
            async function postComment(body) {
              // Add marker to help identify this comment later
              const commentBody = `${body}\n\n${commentMarker}`;
              
              // Try to find existing comment with our marker
              const { data: comments } = await github.rest.issues.listComments({
                owner,
                repo,
                issue_number: prNumber
              });
              
              const existingComment = comments.find(comment => comment.body.includes(commentMarker));
              
              if (existingComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner,
                  repo,
                  comment_id: existingComment.id,
                  body: commentBody
                });
                console.log("Updated existing comment");
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: prNumber,
                  body: commentBody
                });
                console.log("Created new comment");
              }
            }

            // If no linked issues found, comment on the PR
            if (linkedIssues.length === 0) {
              console.log('No linked issues found');
              await postComment('⚠️ This PR is not linked to any issue. Please link an issue using keywords like "Fixes #ISSUE_NUM" or "Closes #ISSUE_NUM" in the PR description or title.');
              return;
            }

            console.log(`Found ${linkedIssues.length} linked issue(s)`);

            // Process each linked issue
            let commentNeeded = false;
            let commentText = '';

            for (const issue of linkedIssues) {
              console.log(`Checking issue ${issue.owner}/${issue.repo}#${issue.number}`);

              try {
                // Get issue details
                const { data: issueData } = await github.rest.issues.get({
                  owner: issue.owner,
                  repo: issue.repo,
                  issue_number: issue.number
                });

                // Check if issue has assignee and it's different from PR creator
                if (issueData.assignees && issueData.assignees.length > 0) {
                  const assigneeLogins = issueData.assignees.map(assignee => assignee.login);

                  if (!assigneeLogins.includes(prCreator)) {
                    const assigneesList = assigneeLogins.map(login => `@${login}`).join(', ');
                    const issueRef = issue.owner === owner && issue.repo === repo
                      ? `#${issue.number}`
                      : `${issue.owner}/${issue.repo}#${issue.number}`;

                    commentNeeded = true;
                    commentText += `⚠️ This PR is linked to issue ${issueRef}, which is assigned to ${assigneesList}. The PR creator (@${prCreator}) is not assigned to the issue.\n\n`;
                    console.log(`PR creator ${prCreator} is not assigned to issue ${issueRef}`);
                  } else {
                    console.log(`PR creator ${prCreator} is correctly assigned to issue ${issue.owner}/${issue.repo}#${issue.number}`);
                  }
                } else {
                  console.log(`Issue ${issue.owner}/${issue.repo}#${issue.number} has no assignees`);
                }
              } catch (error) {
                console.error(`Error checking issue ${issue.owner}/${issue.repo}#${issue.number}: ${error.message}`);
              }
            }

            // Post comment if needed
            if (commentNeeded) {
              await postComment(commentText);
            } else {
              // Check if we have a previous comment to clean up
              const { data: comments } = await github.rest.issues.listComments({
                owner,
                repo,
                issue_number: prNumber
              });
              
              const existingComment = comments.find(comment => comment.body.includes(commentMarker));
              
              if (existingComment) {
                // Delete the comment since it's no longer needed
                await github.rest.issues.deleteComment({
                  owner,
                  repo,
                  comment_id: existingComment.id
                });
                console.log("Deleted obsolete comment");
              }
            }
