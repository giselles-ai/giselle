"use client";

import { Button } from "@giselle-internal/ui/button";
import {
	AlertCircle,
	ArrowLeft,
	CheckIcon,
	ChevronDownIcon,
	ChevronLeft,
	ChevronsRight,
	CircleDashedIcon,
	Clock,
	Lightbulb,
	MessageSquare,
	Minus,
	MoreHorizontal,
	Pen,
	Plus,
	RefreshCw,
	Sparkles,
	XCircle,
	XIcon,
} from "lucide-react";
import { useRouter } from "next/navigation";
import { Accordion } from "radix-ui";

const sequences = [
	{
		id: "seq-1",
		name: "Sequence 1",
		count: 4,
		status: "success",
		steps: [
			{ text: "Generate Query", status: "success" },
			{ text: "Ingest", status: "success" },
			{ text: "Search", status: "success" },
		],
	},
	{
		id: "seq-2",
		name: "cyberpunk_roguelike_sy",
		count: 1,
		status: "in-progress",
		steps: [
			{ text: "Initialize", status: "success" },
			{ text: "Process", status: "in-progress" },
			{ text: "Complete", status: "pending" },
		],
	},
	{
		id: "seq-3",
		name: "futuristic_sword_slash",
		count: 1,
		status: "failed",
		steps: [
			{ text: "Load Assets", status: "success" },
			{ text: "Generate Sound", status: "failed" },
		],
	},
	{
		id: "seq-4",
		name: "player_damage_sound_ef",
		count: 1,
		status: "pending",
		steps: [],
	},
	{
		id: "seq-5",
		name: "drone_destruction_soun",
		count: 1,
		status: "warning",
		steps: [
			{ text: "Analyze", status: "success" },
			{ text: "Synthesize", status: "warning" },
			{ text: "Export", status: "pending" },
		],
	},
	{
		id: "seq-6",

		name: "digital_dash_blink_sou",
		count: 1,
		status: "success",
		steps: [
			{ text: "Setup", status: "success" },
			{ text: "Render", status: "success" },
		],
	},
] as const;

const AgentWorkspace = () => {
	const router = useRouter();

	return (
		<div className="bg-background text-foreground min-h-screen flex flex-col font-sans">
			<div className="flex-grow flex">
				{/* Left Sidebar */}
				<aside className="w-[300px] bg-sidebar flex flex-col py-2 px-[24px] border-r border-border space-y-4 bg-surface-background">
					<div className="-ml-[24px]">
						<Button
							leftIcon={<ArrowLeft />}
							onClick={() => router.push("/stage")}
						>
							Back
						</Button>
					</div>

					<div className="rounded-lg space-y-3">
						<div className="flex items-start gap-3">
							<h2>Create pull request</h2>
						</div>
						{/* <div className="flex bg-secondary rounded-md p-1 text-sm">
							<button className="flex-1 text-muted-foreground py-1 px-2 rounded">
								Steps
							</button>
							<button className="flex-1 bg-card text-foreground py-1 px-2 rounded-md shadow-sm">
								Sources
							</button>
						</div> */}
					</div>

					<div className="flex-grow space-y-2 overflow-y-auto">
						{/* <div className="flex justify-between items-center px-2 py-1">
							<h3 className="text-xs font-medium text-muted-foreground uppercase tracking-wider">
								Files generated by the Agent
							</h3>
							<div className="flex items-center gap-2">
								<File size={14} className="text-muted-foreground" />
								<span className="text-xs font-semibold bg-secondary px-2 py-0.5 rounded-md">
									19
								</span>
							</div>
						</div> */}
						<Accordion.Root type="multiple" className="flex flex-col gap-[8px]">
							{sequences.map((sequence) => (
								<Accordion.Item key={sequence.id} value={sequence.id}>
									<Accordion.Header className="border border-border rounded-[8px] p-[8px] flex justify-between items-center">
										<div className="flex items-center gap-2">
											<div className="text-muted-foreground">
												{sequence.status === "success" && (
													<CheckIcon className="text-success size-[16px]" />
												)}
												{sequence.status === "in-progress" && (
													<RefreshCw className="text-info size-[16px] animate-spin" />
												)}
												{sequence.status === "failed" && (
													<XIcon className="text-error size-[16px]" />
												)}
												{sequence.status === "pending" && (
													<CircleDashedIcon className="text-text-muted size-[16px]" />
												)}
												{sequence.status === "warning" && (
													<AlertCircle className="text-warning size-[16px]" />
												)}
											</div>
											<span className="text-sm">{sequence.name}</span>
										</div>
										{/* <div className="flex items-center gap-2">
										<span className="text-[11px] text-text-muted">
											{file.steps.join(', ')}
										</span>
										{file.active ? (
											<button className="bg-primary/20 text-primary p-1 rounded-full">
												<ChevronLeft size={16} />
											</button>
										) : (
											<ChevronRight
												size={16}
												className="text-muted-foreground"
											/>
										)}
									</div> */}
										<Accordion.Trigger className="group p-[2px] hover:bg-ghost-element-hover rounded-[4px] cursor-pointer outline-none data-[state=open]:bg-ghost-element-active">
											<ChevronDownIcon className="text-text-muted size-[14px] group-data-[state=open]:rotate-180 transition-transform" />
										</Accordion.Trigger>
									</Accordion.Header>

									<Accordion.Content className="pl-[12px] ml-[12px] border-l border-border overflow-hidden data-[state=closed]:animate-slideUp data-[state=open]:animate-slideDown">
										<div className="py-[8px]">
											<div className="text-[12px] text-text-muted mb-[6px]">
												<span>Steps</span>
											</div>
											<div className="space-y-2 pl-[8px]">
												{sequence.steps.map((step, vIndex) => (
													<div
														key={`${sequence.id}-step-${vIndex}`}
														className="flex items-center gap-2 text-[11px] text-text-muted relative"
													>
														<div>
															{step.status === "success" && (
																<CheckIcon className="text-success size-[14px]" />
															)}
															{step.status === "in-progress" && (
																<RefreshCw className="text-info size-[14px] animate-spin" />
															)}
															{step.status === "failed" && (
																<XIcon className="text-error size-[14px]" />
															)}
															{step.status === "pending" && (
																<CircleDashedIcon className="text-text-muted size-[14px]" />
															)}
															{step.status === "warning" && (
																<AlertCircle className="text-warning size-[14px]" />
															)}
														</div>
														<span>{step.text}</span>
													</div>
												))}
											</div>
										</div>
									</Accordion.Content>
								</Accordion.Item>
							))}
						</Accordion.Root>
					</div>

					<div className="flex items-center justify-between p-2 border-t border-border">
						<div className="flex items-center gap-3">
							<img
								src="/placeholder.svg?width=40&height=40"
								alt="User Avatar"
								className="w-10 h-10 rounded-full"
							/>
							<div>
								<p className="font-semibold">toyamarinyon</p>
								<p className="text-xs text-muted-foreground">
									Subscription & Settings
								</p>
							</div>
						</div>
						<button
							type="button"
							className="bg-accent/20 text-accent text-xs font-bold py-1 px-3 rounded-full border border-accent"
						>
							TRIAL
						</button>
					</div>
				</aside>

				{/* Main Content */}
				<main className="flex-1 flex flex-col">
					<header className="flex items-center justify-between p-3 border-b border-border">
						<div className="flex items-center gap-2">
							<button
								type="button"
								className="p-2 rounded-md hover:bg-secondary"
							>
								<MessageSquare size={18} className="text-muted-foreground" />
							</button>
							<button
								type="button"
								className="p-2 rounded-md hover:bg-secondary"
							>
								<Plus size={18} className="text-muted-foreground" />
							</button>
							<button
								type="button"
								className="p-2 rounded-md hover:bg-secondary"
							>
								<ChevronsRight size={18} className="text-muted-foreground" />
							</button>
							<div className="w-px h-6 bg-border mx-2"></div>
							<button
								type="button"
								className="bg-primary text-primary-foreground text-sm font-semibold px-4 py-1.5 rounded-md shadow-md shadow-primary/20"
							>
								Share
							</button>
							<button
								type="button"
								className="p-2 rounded-md hover:bg-secondary"
							>
								<ChevronLeft size={18} className="text-muted-foreground" />
							</button>
						</div>
						<div className="flex items-center gap-2">
							<MoreHorizontal size={20} className="text-muted-foreground" />
						</div>
					</header>

					<div className="flex-1 flex flex-col items-center justify-center p-8 overflow-y-auto space-y-4">
						<div className="w-full max-w-2xl mx-auto flex flex-col items-center">
							<div className="w-px h-16 bg-border border-l border-dashed border-border"></div>
							<div className="flex items-center gap-2 bg-card p-2 rounded-full border border-border text-sm">
								<span>Acknowledge the user's feedback and update the...</span>
								<RefreshCw size={14} className="text-muted-foreground" />
							</div>
							<div className="w-px h-8 bg-border border-l border-dashed border-border"></div>

							<div className="bg-card border border-border rounded-2xl p-6 w-full space-y-4 shadow-lg">
								<h3 className="font-semibold">Agent Neo:</h3>
								<blockquote className="border-l-2 border-primary pl-4 italic text-primary-light">
									"This document has been updated to reflect the new
									protagonist, Aya, as per user feedback."
								</blockquote>
								<div className="border-t border-border"></div>
								<div className="space-y-2">
									<h4 className="text-lg font-bold">
										Game Design Document: Chrono{/* Breach */}
									</h4>
									<h5 className="text-md font-semibold">
										1. Executive Summary
									</h5>
									<p className="text-muted-foreground text-sm">
										<span className="text-primary-light">
											Chrono{/* Breach */}
										</span>{" "}
										is a 2D action roguelike set in a collapsing digital
										reality. Players take on the role of Aya, a brilliant
										high-school student and coder...
									</p>
								</div>
								<div className="flex justify-between items-center text-xs text-muted-foreground">
									<div className="flex items-center gap-2 bg-secondary px-2 py-1 rounded-full">
										<Sparkles size={14} />
										<span>gen document</span>
									</div>
									<span>Yesterday 10:22</span>
								</div>
							</div>

							<div className="w-px h-8 bg-border border-l border-dashed border-border"></div>
							<div className="flex items-center gap-2 bg-card p-2 rounded-full border border-border text-sm">
								<span>Based on the updated Game Design Document,...</span>
								<RefreshCw size={14} className="text-muted-foreground" />
							</div>
							<div className="flex items-center gap-2 bg-secondary px-2 py-1 rounded-full text-xs mt-2">
								<Sparkles size={14} />
								<span>Agent Mode</span>
							</div>
							<div className="w-full border-t border-dashed border-border mt-4"></div>
							<div className="self-end flex items-center gap-2 bg-secondary px-2 py-1 rounded-full text-xs mt-2">
								<span>markdown</span>
								<Pen size={14} />
							</div>
						</div>
					</div>

					<footer className="p-4 border-t border-border">
						<div className="flex items-center gap-4 max-w-4xl mx-auto">
							<div className="flex items-center gap-2">
								<button
									type="button"
									className="p-2 rounded-md hover:bg-secondary"
								>
									<Plus size={18} />
								</button>
								<button
									type="button"
									className="p-2 rounded-md hover:bg-secondary"
								>
									<Minus size={18} />
								</button>
								<button
									type="button"
									className="p-2 rounded-md bg-primary/20 text-primary"
								>
									<Lightbulb size={18} />
								</button>
							</div>
							<div className="flex-grow relative">
								<input
									type="text"
									placeholder="Ask Agent Neo for your task and requirements"
									className="w-full bg-card border border-border rounded-lg py-3 pl-4 pr-12 text-sm placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary"
								/>
								<button
									type="button"
									className="absolute right-2 top-1/2 -translate-y-1/2 bg-foreground text-background p-1.5 rounded-md"
								>
									<Plus size={20} />
								</button>
							</div>
						</div>
					</footer>
				</main>
			</div>
		</div>
	);
};

export default AgentWorkspace;
