import {
	AlertCircle,
	CheckIcon,
	ChevronDownIcon,
	CircleDashedIcon,
	RefreshCw,
	XIcon,
} from "lucide-react";
import Link from "next/link";
import { Accordion } from "radix-ui";

const sequences = [
	{
		id: "seq-1",
		name: "Sequence 1",
		count: 4,
		status: "success",
		steps: [
			{ id: "step-1-1", text: "Generate Query", status: "success" },
			{ id: "step-1-2", text: "Ingest", status: "success" },
			{ id: "step-1-3", text: "Search", status: "success" },
		],
	},
	{
		id: "seq-2",
		name: "cyberpunk_roguelike_sy",
		count: 1,
		status: "in-progress",
		steps: [
			{ id: "step-2-1", text: "Initialize", status: "success" },
			{ id: "step-2-2", text: "Process", status: "in-progress" },
			{ id: "step-2-3", text: "Complete", status: "pending" },
		],
	},
	{
		id: "seq-3",
		name: "futuristic_sword_slash",
		count: 1,
		status: "failed",
		steps: [
			{ id: "step-3-1", text: "Load Assets", status: "success" },
			{ id: "step-3-2", text: "Generate Sound", status: "failed" },
		],
	},
	{
		id: "seq-4",
		name: "player_damage_sound_ef",
		count: 1,
		status: "pending",
		steps: [],
	},
	{
		id: "seq-5",
		name: "drone_destruction_soun",
		count: 1,
		status: "warning",
		steps: [
			{ id: "step-5-1", text: "Analyze", status: "success" },
			{ id: "step-5-2", text: "Synthesize", status: "warning" },
			{ id: "step-5-3", text: "Export", status: "pending" },
		],
	},
	{
		id: "seq-6",

		name: "digital_dash_blink_sou",
		count: 1,
		status: "success",
		steps: [
			{ id: "step-6-1", text: "Setup", status: "success" },
			{ id: "step-6-2", text: "Render", status: "success" },
		],
	},
] as const;

export default function ({ children }: React.PropsWithChildren) {
	return (
		<div className="bg-background text-foreground min-h-screen flex flex-col font-sans">
			<div className="flex-grow flex">
				{/* Left Sidebar */}
				<aside className="w-[300px] bg-sidebar flex flex-col py-2 px-[24px] border-r border-border space-y-4 bg-surface-background">
					<div className="-ml-[24px]">
						<Link href="/stage">Back</Link>
					</div>

					<div className="rounded-lg space-y-3">
						<div className="flex items-start gap-3">
							<h2>Create pull request</h2>
						</div>
						{/* <div className="flex bg-secondary rounded-md p-1 text-sm">
							<button className="flex-1 text-muted-foreground py-1 px-2 rounded">
								Steps
							</button>
							<button className="flex-1 bg-card text-foreground py-1 px-2 rounded-md shadow-sm">
								Sources
							</button>
						</div> */}
					</div>

					<div className="flex-grow space-y-2 overflow-y-auto">
						{/* <div className="flex justify-between items-center px-2 py-1">
							<h3 className="text-xs font-medium text-muted-foreground uppercase tracking-wider">
								Files generated by the Agent
							</h3>
							<div className="flex items-center gap-2">
								<File size={14} className="text-muted-foreground" />
								<span className="text-xs font-semibold bg-secondary px-2 py-0.5 rounded-md">
									19
								</span>
							</div>
						</div> */}
						<Accordion.Root type="multiple" className="flex flex-col gap-[8px]">
							{sequences.map((sequence) => (
								<Accordion.Item key={sequence.id} value={sequence.id}>
									<Accordion.Header className="border border-border rounded-[8px] p-[8px] flex justify-between items-center">
										<div className="flex items-center gap-2">
											<div className="text-muted-foreground">
												{sequence.status === "success" && (
													<CheckIcon className="text-success size-[16px]" />
												)}
												{sequence.status === "in-progress" && (
													<RefreshCw className="text-info size-[16px] animate-spin" />
												)}
												{sequence.status === "failed" && (
													<XIcon className="text-error size-[16px]" />
												)}
												{sequence.status === "pending" && (
													<CircleDashedIcon className="text-text-muted size-[16px]" />
												)}
												{sequence.status === "warning" && (
													<AlertCircle className="text-warning size-[16px]" />
												)}
											</div>
											<span className="text-sm">{sequence.name}</span>
										</div>
										{/* <div className="flex items-center gap-2">
										<span className="text-[11px] text-text-muted">
											{file.steps.join(', ')}
										</span>
										{file.active ? (
											<button className="bg-primary/20 text-primary p-1 rounded-full">
												<ChevronLeft size={16} />
											</button>
										) : (
											<ChevronRight
												size={16}
												className="text-muted-foreground"
											/>
										)}
									</div> */}
										<Accordion.Trigger className="group p-[2px] hover:bg-ghost-element-hover rounded-[4px] cursor-pointer outline-none data-[state=open]:bg-ghost-element-active">
											<ChevronDownIcon className="text-text-muted size-[14px] group-data-[state=open]:rotate-180 transition-transform" />
										</Accordion.Trigger>
									</Accordion.Header>

									<Accordion.Content className="pl-[2px] ml-[10px] border-l border-border overflow-hidden data-[state=closed]:animate-slideUp data-[state=open]:animate-slideDown">
										<div className="py-[8px]">
											<div className="space-y-2 pl-[8px]">
												{sequence.steps.map((step) => (
													<div
														key={step.id}
														className="flex items-center gap-[4px] text-[11px] text-text-muted relative"
													>
														<div>
															{step.status === "success" && (
																<CheckIcon className="text-success size-[12px]" />
															)}
															{step.status === "in-progress" && (
																<RefreshCw className="text-info size-[12px] animate-spin" />
															)}
															{step.status === "failed" && (
																<XIcon className="text-error size-[12px]" />
															)}
															{step.status === "pending" && (
																<CircleDashedIcon className="text-text-muted size-[12px]" />
															)}
															{step.status === "warning" && (
																<AlertCircle className="text-warning size-[12px]" />
															)}
														</div>
														<span>{step.text}</span>
													</div>
												))}
											</div>
										</div>
									</Accordion.Content>
								</Accordion.Item>
							))}
						</Accordion.Root>
					</div>

					<div className="flex items-center justify-between p-2 border-t border-border">
						<div className="flex items-center gap-3">
							<img
								src="/placeholder.svg?width=40&height=40"
								alt="User Avatar"
								className="w-10 h-10 rounded-full"
							/>
							<div>
								<p className="font-semibold">toyamarinyon</p>
								<p className="text-xs text-muted-foreground">
									Subscription & Settings
								</p>
							</div>
						</div>
						<button
							type="button"
							className="bg-accent/20 text-accent text-xs font-bold py-1 px-3 rounded-full border border-accent"
						>
							TRIAL
						</button>
					</div>
				</aside>

				<main className="flex-1 flex flex-col">{children}</main>
			</div>
		</div>
	);
}
